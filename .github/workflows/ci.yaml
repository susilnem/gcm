name: CI Test Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - v*.*.*
  pull_request:
    branches:
      - main
      - develop
      - project/*
      - v*.*.*
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  lint:
    name: Lint and Pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
          cache-dependency-path: go.mod

      - name: Install dependencies
        run: go mod tidy

      - name: Run pre-commit hooks
        uses: pre-commit/action@main
        with:
          extra_args: --all-files

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1
          args: --timeout=5m

  test:
    name: Test with Go ${{ matrix.go-version }}
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.24']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: go.mod

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests with coverage
        run: |
          go test -covermode=count -coverprofile=coverage.out ./...

      - name: Upload coverage report to Codecov
        if: matrix.go-version == '1.24' && !cancelled()
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: go-1.24
          fail_ci_if_error: true

      - name: Upload test results to Codecov
        if: matrix.go-version == '1.24' && !cancelled()
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  codequalitycheck:
    name: CodeQL Analysis
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-and-quality

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3
